//@ This file is part of opal-localstorage.
//@ https://github.com/Pretty-SFOS/opal-localstorage
//@ SPDX-License-Identifier: GPL-3.0-or-later
//@ SPDX-FileCopyrightText: 2018-2025 Mirian Margiani
.pragma library
.import QtQuick.LocalStorage 2.0 as LS
var _lc="[Opal.LocalStorage] ";function defaultFor(variable,fallback){return typeof variable!=="undefined"?variable:fallback;};function isSameValue(x,y){return x===y?x!==0||1/x===1/y:x!==x&&y!==y;};var _DB_STATUS_SIGNAL=null;var _EVENT_COUNTER=1;var _USER_EVENT_COUNTER=1;var _DATABASE_COUNTER=0;function Database(handle,name,description){_DATABASE_COUNTER++;var _lc_db=_lc+"[DB "+handle+"]";this._log=console.log.bind(console,_lc_db);this._warn=console.warn.bind(console,_lc_db);this._error=console.error.bind(console,_lc_db);this.handle=defaultFor(handle,String(_DATABASE_COUNTER));this.name=defaultFor(name,"My Database");this.description=defaultFor(description,"");this.isOk=true;this.migrations=[];this.enableAutoMaintenance=true;this.maintenanceInterval=60;this.maintenanceCallback=null;this.settingsTable="__local_settings";this._expectedSize=2000000;this.__initialized=false;this.__db=null;this._notify=(function(event,busy,data,__handle){if(!__handle){_EVENT_COUNTER++;__handle=_EVENT_COUNTER;}this._log("event:",event,"["+__handle+"]",(busy?" (busy)":""),!!data?JSON.stringify(data):"");if(_DB_STATUS_SIGNAL instanceof Function){try{_DB_STATUS_SIGNAL(event,String(__handle),busy,data);}catch(e){this._error("sending the status signal failed:","\n   ERROR  >",e,"\n   STACK  >\n",e.stack);}}return __handle;}).bind(this);this._notifyEnd=(function(handle){this._notify("end",false,null,handle);}).bind(this);this.notify=(function(event,busy,data){_USER_EVENT_COUNTER++;var handle=String("user-%1").arg(_USER_EVENT_COUNTER);return this._notify(event,busy,data,handle);}).bind(this);this.notifyEnd=(function(handle){this._notify("end",false,null,handle);}).bind(this);this.getDatabase=(function(){if(!this.isOk){this._error("database is not available, check previous logs");throw new Error("database is not available, check previous logs");}if(!this.__initialized||this.__db===null){this._log("initializing database...");this.__db=LS.LocalStorage.openDatabaseSync(this.name,"",this.description,this._expectedSize);if(this.__doInit(this.__db)){this.__initialized=true;this.isOk=true;if(this.enableAutoMaintenance){this.__doDatabaseMaintenance();}}else{this.isOk=false;}}return this.__db;}).bind(this);this.guardedTx=(function(tx,callback){var res=null;try{tx.executeSql("SAVEPOINT __guarded_tx_started__;");res=callback(tx);tx.executeSql("RELEASE __guarded_tx_started__;");}catch(e){tx.executeSql("ROLLBACK TO __guarded_tx_started__;");this._error("guarded transaction failed:","\n   ERROR  >",e,"\n   CALLER >",e.stack);throw e;}return res;}).bind(this);this.readQuery=(function(query,values){return this.simpleQuery(query,values,true);}).bind(this);this.simpleQuery=(function(query,values,readOnly){var db=this.getDatabase();var res={ok:false,rowsAffected:0,insertId:null,rows:[]};values=defaultFor(values,[]);if(!query){this._error("bug: cannot execute an empty database query");return res;}try{var callback=(function(tx){var rs=null;if(readOnly===true){rs=tx.executeSql(query,values);}else{rs=this.guardedTx(tx,(function(tx){return tx.executeSql(query,values);}).bind(this));}if(rs.rowsAffected>0){res.rowsAffected=rs.rowsAffected;}else{res.rowsAffected=0;}res.insertId=defaultFor(rs.insertId,null);res.rows=rs.rows;}).bind(this);if(readOnly===true){db.readTransaction(callback);}else{db.transaction(callback);}res.ok=true;}catch(e){this._error((readOnly===true?"read-only ":"")+"database query failed:","\n   ERROR  >",e,"\n   QUERY  >",query,"\n   VALUES >",values);this._notify("query-failed",false,{exception:e,query:query,values:values,readOnly:readOnly});res.ok=false;}return res;}).bind(this);this.setSetting=(function(key,value){this.simpleQuery("INSERT OR REPLACE INTO %1 VALUES (?, ?);".arg(this.settingsTable),[key,value]);}).bind(this);this.getSetting=(function(key,fallback){var res=this.simpleQuery("SELECT value FROM %1 WHERE key=? LIMIT 1;".arg(this.settingsTable),[key]);if(res.rows.length>0){res=defaultFor(res.rows.item(0).value,fallback);}else{res=fallback;}return res;}).bind(this);this.createSettingsTable=(function(tx){this.guardedTx(tx,(function(tx){tx.executeSql("CREATE TABLE IF NOT EXISTS %1 (key TEXT UNIQUE, value TEXT);".arg(this.settingsTable));}).bind(this));}).bind(this);this.makeTableSortable=(function(tx,tableName,orderColumn){if(!(!!tableName)||typeof tableName!="string"||false){throw new Error("Table name must be a string starting with "+"an underscore ('_'), got '%1'".arg(tableName));}var viewName=tableName.toString().slice(1);if(!(!!orderColumn)||typeof orderColumn!="string"){throw new Error("Order column must be a string, got '%1'".arg(orderColumn));}var columns=[];var rs=tx.executeSql("SELECT name FROM pragma_table_info(\"%1\") as info;".arg(tableName));for(var i=0;i<rs.rows.length;++i){var name=rs.rows.item(i).name.toString();if(name!==orderColumn){columns.push(name);}}if(columns.length===0){throw new Error("Table '%1' must have at least one column "+"other than the order column".arg(tableName));}var columnsString=columns.join(", ");var newColumnsString="NEW."+columns.join(", NEW.");tx.executeSql("            CREATE VIEW %1 AS SELECT * FROM %2;\n        ".arg(viewName).arg(tableName));tx.executeSql("            CREATE TRIGGER %1_ins_err INSTEAD OF INSERT ON %1\n            WHEN NEW.%3 < 1 OR NEW.%3 > (SELECT COUNT()+1 FROM %2) OR CAST(NEW.%3 AS INT) <> NEW.%3\n            BEGIN\n                SELECT RAISE(ABORT, \"Invalid index!\");\n            END;\n        ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("            CREATE TRIGGER %1_ins INSTEAD OF INSERT ON %1\n            WHEN NEW.%3 BETWEEN 1 AND (SELECT COUNT() FROM %2)+1\n            BEGIN\n                UPDATE %2 SET %3 = %3 + 1 WHERE %3 >= NEW.%3;\n                INSERT INTO %2(%4, %3) VALUES(%5, NEW.%3);\n            END;\n        ".arg(viewName).arg(tableName).arg(orderColumn).arg(columnsString).arg(newColumnsString));tx.executeSql("            CREATE TRIGGER %1_ins_last INSTEAD OF INSERT ON %1\n            WHEN NEW.%3 IS NULL\n            BEGIN\n                INSERT INTO %2(%4, %3) VALUES(%5, (SELECT COUNT()+1 FROM %2));\n            END;\n        ".arg(viewName).arg(tableName).arg(orderColumn).arg(columnsString).arg(newColumnsString));tx.executeSql("            CREATE TRIGGER %1_del INSTEAD OF DELETE ON %1\n            BEGIN\n                DELETE FROM %2 WHERE %3 = OLD.%3;\n                UPDATE %2 SET %3 = %3 - 1 WHERE %3>OLD.%3;\n            END;\n        ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("            CREATE TRIGGER %1_upd_err INSTEAD OF UPDATE OF %3 ON %1\n            WHEN NEW.%3 NOT BETWEEN 1 AND (SELECT COUNT() FROM %2) OR CAST(NEW.%3 AS INT)<>NEW.%3 OR NEW.%3 IS NULL\n            BEGIN\n                SELECT RAISE(ABORT, \"Invalid index!\");\n            END;\n        ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("            CREATE TRIGGER %1_upd_up INSTEAD OF UPDATE OF %3 ON %1\n            WHEN NEW.%3 BETWEEN OLD.%3+1 AND (SELECT COUNT() FROM %2)\n            BEGIN\n                UPDATE %2 SET %3 = NULL WHERE %3 = OLD.%3;\n                UPDATE %2 SET %3 = %3 - 1 WHERE %3 BETWEEN OLD.%3 AND NEW.%3;\n                UPDATE %2 SET %3 = NEW.%3 WHERE %3 IS NULL;\n            END;\n        ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("            CREATE TRIGGER %1_upd_down INSTEAD OF UPDATE OF %3 ON %1\n            WHEN NEW.%3 BETWEEN 1 AND OLD.%3-1\n            BEGIN\n                UPDATE %2 SET %3 = NULL WHERE %3 = OLD.%3;\n                UPDATE %2 SET %3 = %3 + 1 WHERE %3 BETWEEN NEW.%3 AND OLD.%3;\n                UPDATE %2 SET %3 = NEW.%3 WHERE %3 IS NULL;\n            END;\n        ".arg(viewName).arg(tableName).arg(orderColumn));}).bind(this);this.__doInit=(function(db){var latestVersion=0;if(this.migrations.length>0){latestVersion=this.migrations[this.migrations.length-1][0];}var initialVersion=db.version;var previousVersion=Number(initialVersion||"0");var nextVersion=null;var handle=null;var upgradesOk=true;if(initialVersion===""){this._log("initializing new database:",this.name,"|",this.handle);db.transaction(this.createSettingsTable);handle=this._notify("init",true);}else if(!!latestVersion&&initialVersion<latestVersion){handle=this._notify("upgrade",true,{from:initialVersion,to:latestVersion});}else if(!!latestVersion&&initialVersion!==String(latestVersion)){handle=this._notify("invalid-version",false,{got:initialVersion,expected:latestVersion});return false;}if(initialVersion!==String(latestVersion)){for(var i in this.migrations){nextVersion=this.migrations[i][0];if(previousVersion<nextVersion){try{this._log("migrating database to version",nextVersion);db.changeVersion(db.version,nextVersion,(function(tx){this.guardedTx(tx,(function(tx){var migrationType=typeof this.migrations[i][1];if(migrationType==="string"){tx.executeSql(this.migrations[i][1]);}else if(migrationType==="function"){this.migrations[i][1](tx);}else{throw new Error("expected migration as string or function, got "+migrationType+" instead");}}).bind(this));}).bind(this));}catch(e){this._error("fatal: failed to upgrade database version from",previousVersion,"to",nextVersion);this._error("exception:\n",e);db.changeVersion(db.version,previousVersion,function(tx){});this._notify("upgrade-failed",false,{from:previousVersion,to:nextVersion,exception:e});upgradesOk=false;break;}previousVersion=nextVersion;}}}if(!!handle){this._notifyEnd(handle);}if(!upgradesOk){this._log("cannot load database due to previous errors");return false;}else if(previousVersion!==latestVersion){this._error("fatal: expected database version",String(latestVersion),"but loaded database has version",previousVersion);this._notify("invalid-version",false,{got:initialVersion,expected:latestVersion});return false;}this._log("loaded database version",previousVersion);return true;}).bind(this);this.__vacuumDatabase=(function(){var db=this.getDatabase();try{db.transaction(function(tx){tx.executeSql("END TRANSACTION;");tx.executeSql("VACUUM;");});}catch(e){this._error("database vacuuming failed:\n",e);}}).bind(this);this.__doDatabaseMaintenance=(function(){var interval=String(Number(this.maintenanceInterval));if(!/^[1-9]+[0-9]*$/ .test(interval)){interval="60";}var last_maintenance=this.simpleQuery("SELECT * FROM %1 WHERE key = \"last_maintenance\"                  AND value >= date(\"now\", \"-%2 day\") LIMIT 1;".arg(this.settingsTable).arg(interval),[],true);if(last_maintenance.rows.length>0){return;}this._log("running regular database maintenance...");var handle=this._notify("maintenance",true);if(this.maintenanceCallback instanceof Function){try{this.maintenanceCallback();}catch(e){this._error("custom database maintenance failed:","\n   ERROR  >",e,"\n   STACK  >\n",e.stack);}}this.__vacuumDatabase();this._log("maintenance finished");this.setSetting("last_maintenance",new Date().toISOString());this._notifyEnd(handle);}).bind(this);};